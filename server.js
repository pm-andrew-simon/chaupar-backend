// server.js
// –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∏–≥—Ä—ã –ß–∞—É–ø–∞—Ä

// 1. –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
const express = require('express');
// 2. –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –∫—É–±–∏–∫–∞–º–∏
const { generateDiceValues, isSpecialDouble, rollDiceWithAnimation } = require('./dice');

// 3. –°–æ–∑–¥–∞–µ–º Express-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–Ω–∞—à —Å–µ—Ä–≤–µ—Ä)
const app = express();
// 4. –†–∞–∑—Ä–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É JSON –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–ø—Ä–æ—Å–∞—Ö
app.use(express.json());

// 5. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS - —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å –¥—Ä—É–≥–∏—Ö –¥–æ–º–µ–Ω–æ–≤ (—Å –≤–∞—à–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
app.use((req, res, next) => {
    res.header('Access-Control-Allow-Origin', '*'); // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ–º (*) –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π URL —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept');
    next();
});

// 6. –°–æ–∑–¥–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã (—Ä–æ—É—Ç—ã) API

// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç - –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç
app.get('/', (req, res) => {
    res.json({ 
        message: 'üéØ –°–µ—Ä–≤–µ—Ä –∏–≥—Ä—ã –ß–∞—É–ø–∞—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!',
        endpoints: {
            simpleRoll: '/api/roll/simple - –ü—Ä–æ—Å—Ç–æ–π –±—Ä–æ—Å–æ–∫ –∫—É–±–∏–∫–æ–≤',
            animatedRoll: '/api/roll/animated - –ë—Ä–æ—Å–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π',
            checkDouble: '/api/check-double?dice1=X&dice2=Y - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥—É–±–ª—è'
        }
    });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –±—Ä–æ—Å–∫–∞ –∫—É–±–∏–∫–æ–≤
app.get('/api/roll/simple', (req, res) => {
    try {
        const result = generateDiceValues();
        res.json({
            success: true,
            ...result,
            isSpecialDouble: isSpecialDouble(result.dice1, result.dice2)
        });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±—Ä–æ—Å–∫–∞
app.get('/api/roll/animated', async (req, res) => {
    try {
        const result = await rollDiceWithAnimation();
        res.json({
            success: true,
            ...result,
            isSpecialDouble: isSpecialDouble(result.dice1, result.dice2)
        });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –¥—É–±–ª—è
app.get('/api/check-double', (req, res) => {
    try {
        const dice1 = parseInt(req.query.dice1);
        const dice2 = parseInt(req.query.dice2);
        
        if (isNaN(dice1) || isNaN(dice2) || dice1 < 1 || dice1 > 6 || dice2 < 1 || dice2 > 6) {
            return res.status(400).json({ 
                success: false, 
                error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫—É–±–∏–∫–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–∞ –æ—Ç 1 –¥–æ 6.' 
            });
        }
        
        res.json({
            success: true,
            dice1,
            dice2,
            isSpecialDouble: isSpecialDouble(dice1, dice2)
        });
    } catch (error) {
        res.status(500).json({ success: false, error: error.message });
    }
});

// 7. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ—Ä—Ç (Render —Å–∞–º –¥–∞–µ—Ç –ø–æ—Ä—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è)
const PORT = process.env.PORT || 3000;

// 8. –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
app.listen(PORT, () => {
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –ß–∞—É–ø–∞—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì° –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
    console.log('üé≤ –ì–æ—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –±—Ä–æ—Å–∫–∏ –∫—É–±–∏–∫–æ–≤!');
});