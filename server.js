// server.js
// –°–µ—Ä–≤–µ—Ä–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π –∫—É–±–∏–∫–æ–≤ –¥–ª—è –∏–≥—Ä—ã –ß–∞—É–ø–∞—Ä

/**
 * –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –∫—É–±–∏–∫–æ–≤
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –¥–≤—É–º—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –æ—Ç 1 –¥–æ 6
 * @returns {Object} –û–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ dice1, dice2, sum
 */
function generateDiceValues() {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–≤–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 1 –¥–æ 6
    const dice1 = Math.floor(Math.random() * 6) + 1;
    const dice2 = Math.floor(Math.random() * 6) + 1;
    const sum = dice1 + dice2;
    
    return {
        dice1: dice1,
        dice2: dice2,
        sum: sum
    };
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏ (1-1 –∏–ª–∏ 6-6)
 * @param {number} dice1 - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫—É–±–∏–∫–∞
 * @param {number} dice2 - –ó–Ω–∞—á–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –∫—É–±–∏–∫–∞
 * @returns {boolean} true –µ—Å–ª–∏ –≤—ã–ø–∞–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –¥—É–±–ª—å
 */
function isSpecialDouble(dice1, dice2) {
    return (dice1 === 1 && dice2 === 1) || (dice1 === 6 && dice2 === 6);
}

/**
 * –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ –±—Ä–æ—Å–∫–∞ —Å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
 * @returns {Promise<Object>} Promise —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∫—É–±–∏–∫–æ–≤
 */
function rollDiceWithAnimation() {
    return new Promise((resolve) => {
        // –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ (1.5-2 —Å–µ–∫—É–Ω–¥—ã)
        const animationDuration = 1500 + Math.random() * 500;
        
        // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–ª—É—á–∞–π–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏
        const animationSteps = 10;
        const stepDuration = animationDuration / animationSteps;
        let currentStep = 0;
        
        const animationInterval = setInterval(() => {
            // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ)
            const tempValues = generateDiceValues();
            console.log(`–ê–Ω–∏–º–∞—Ü–∏—è —à–∞–≥ ${currentStep + 1}: ${tempValues.dice1}, ${tempValues.dice2}`);
            
            currentStep++;
            
            if (currentStep >= animationSteps) {
                clearInterval(animationInterval);
                // –§–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                const finalValues = generateDiceValues();
                console.log(`–§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${finalValues.dice1} + ${finalValues.dice2} = ${finalValues.sum}`);
                resolve(finalValues);
            }
        }, stepDuration);
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Node.js
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        generateDiceValues,
        isSpecialDouble,
        rollDiceWithAnimation
    };
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
if (require.main === module) {
    console.log('=== –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫—É–±–∏–∫–æ–≤ ===');
    
    // –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
    console.log('–ü—Ä–æ—Å—Ç–æ–π –±—Ä–æ—Å–æ–∫:', generateDiceValues());
    
    // –¢–µ—Å—Ç –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –¥—É–±–ª–∏
    console.log('1-1 —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –¥—É–±–ª—å:', isSpecialDouble(1, 1));
    console.log('6-6 —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –¥—É–±–ª—å:', isSpecialDouble(6, 6));
    console.log('3-4 –æ–±—ã—á–Ω—ã–π –±—Ä–æ—Å–æ–∫:', isSpecialDouble(3, 4));
    
    // –¢–µ—Å—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±—Ä–æ—Å–∫–∞
    console.log('\n=== –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—Ä–æ—Å–æ–∫ ===');
    rollDiceWithAnimation().then(result => {
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±—Ä–æ—Å–∫–∞:', result);
        if (isSpecialDouble(result.dice1, result.dice2)) {
            console.log('üéâ –í—ã–ø–∞–ª —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –¥—É–±–ª—å!');
        }
    });
}